buildscript {
    repositories {
        maven {
            url artifactory_contextUrl + '/plugins-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.0.9')
    }
}

allprojects {
    apply plugin: 'artifactory'
    apply plugin: 'maven'
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'libs-release-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
    }
}

apply plugin: 'java'

sourceCompatibility = '1.7'
group = 'bnorm'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        url artifactory_contextUrl + '/plugins-release'
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

dependencies {
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl', version: 'latest.release'
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl_util', version: 'latest.release'
    compile group: 'ninjacave', name: 'slick-util', version: '1.0'

    testCompile group: 'junit', name: 'junit', version: 'latest.release'
}

task natives {
    description = 'Copies native libraries to an appropriate directory.'
    def os = System.getProperty('os.name').toLowerCase()
    def platform = 'linux';
    if (os.contains('windows')) {
        platform = 'windows'
    } else if (os.contains('mac os')) {
        platform = 'osx'
    } // assume linux

    def outputDir = "$buildDir/natives"
    inputs.files(configurations.compile)
    outputs.dir(outputDir)

    copy {
        def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts
                .findAll { it.classifier == "natives-$platform" }
        artifacts.each {
            from zipTree(it.file)
        }
        into outputDir
    }
}

task publish(dependsOn: artifactoryPublish)
